<!DOCTYPE html>
<html lang="en" data-theme="sunset">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Shelflove</title>
    <!-- <script src="https://cdn.tailwindcss.com"></script> -->
    <!-- <script src="https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio,line-clamp,container-queries"></script> -->
    <link type="text/css" href="/css/style.css" rel="stylesheet" />

    <link
      href="https://cdn.jsdelivr.net/npm/daisyui@4.12.2/dist/full.min.css"
      rel="stylesheet"
      type="text/css"
    />
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body>
    <%- include('./components/navbar.ejs') %>
    <div class="mx-5 my-5">
      <h1 class="text text-xl font-bold">Admin dashboard</h1>

      <% if (requestedReturns.length > 0) { %>
      <div class="flex flex-row justify-between">
        <h3 class="text text-slate-400 text-2xl">Requested returns</h3>
        <button class="btn btn-accent approve-btn">Approve Selected</button>
      </div>
      <table class="table table-striped">
        <thead>
          <tr class="text text-blue-500 text-lg">
            <th>Issue ID</th>
            <th>Title</th>
            <th>Author</th>
            <th>Issued Date</th>
            <th>Return Date</th>
            <th>Requested Return</th>
            <th>Select to approve</th>
          </tr>
        </thead>
        <tbody>
          <% for (const returnRequest of requestedReturns) { %>
          <tr>
            <td><%= returnRequest.issueId %></td>
            <td class="flex flex-row gap-2">
              <%= returnRequest.bookTitle %>
              <a href="/books/<%= returnRequest.bookid %>">
                <svg
                  class="cursor-pointer"
                  width="26px"
                  height="26px"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                  <g
                    id="SVGRepo_tracerCarrier"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  ></g>
                  <g id="SVGRepo_iconCarrier">
                    <g id="Interface / External_Link">
                      <path
                        id="Vector"
                        d="M10.0002 5H8.2002C7.08009 5 6.51962 5 6.0918 5.21799C5.71547 5.40973 5.40973 5.71547 5.21799 6.0918C5 6.51962 5 7.08009 5 8.2002V15.8002C5 16.9203 5 17.4801 5.21799 17.9079C5.40973 18.2842 5.71547 18.5905 6.0918 18.7822C6.5192 19 7.07899 19 8.19691 19H15.8031C16.921 19 17.48 19 17.9074 18.7822C18.2837 18.5905 18.5905 18.2839 18.7822 17.9076C19 17.4802 19 16.921 19 15.8031V14M20 9V4M20 4H15M20 4L13 11"
                        stroke="#000000"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      ></path>
                    </g>
                  </g>
                </svg>
              </a>
            </td>
            <td><%= returnRequest.author %></td>
            <td>
              <%= moment(returnRequest.issue_date).format('YYYY-MM-DD') %>
            </td>
            <td>
              <%= moment(returnRequest.return_date).format('YYYY-MM-DD') %>
            </td>
            <td><%= returnRequest.returnRequested==0?"No":"Yes" %></td>
            <td>
              <input
                type="checkbox"
                class="checkbox return-checkbox"
                id="checkbox<%=returnRequest.issueId%>"
                data-issue-id="<%= returnRequest.issueId %>"
              />
            </td>
          </tr>

          <% } %>
        </tbody>
      </table>
      <% } else { %>
      <p>No new Requests</p>

      <% } %>

      <br />
      <div class="divider"></div>
      <% if (requestedAdmins.length > 0) { %>
      <div>
        <div class="flex flex-row justify-between">
          <h3 class="text text-slate-400 text-2xl">
            Requested users to be Admin
          </h3>
          <button class="btn btn-accent approve-admin-btn">
            Approve Selected
          </button>
        </div>
        <table class="table table-striped">
          <thead>
            <tr class="text text-blue-500 text-lg">
              <th>User ID</th>
              <th>Name</th>
              <th>Email</th>
              <th>Select to approve</th>
            </tr>
          </thead>
          <tbody>
            <% for (const adminRequest of requestedAdmins) { %>
            <tr>
              <td><%= adminRequest.userId %></td>

              <td><%= adminRequest.username %></td>
              <td><%= adminRequest.email %></td>

              <td>
                <input
                  type="checkbox"
                  class="checkbox admin-checkbox"
                  id="checkbox<%=adminRequest.userId%>"
                  data-user-id="<%= adminRequest.userId %>"
                />
              </td>
            </tr>

            <% } %>
          </tbody>
        </table>
      </div>
      <br />
      <div class="divider"></div>
      <% } %>
    </div>
    <button class="btn addBookModal" onclick="addBookModal.showModal()">
      Add a new Book
    </button>
    <button class="btn btn-secondary mx-4" id="logout">Logout</button>

    <dialog id="addBookModal" class="modal">
      <div class="modal-box w-11/12 max-w-5xl">
        <form method="dialog">
          <button
            class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
          >
            âœ•
          </button>
        </form>
        <h3 class="font-bold text-lg">Add New book</h3>
        <div class="divider divider-accent"></div>
        <form action="/api/admin/addbook/" method="post" id="addnewbookForm">
          <div>
            <label class="text-xl" for="title">Title</label>
            <input
              type="text"
              name="title"
              class="input input-bordered w-full max-w-xs my-3 mx-3"
              placeholder="Enter book title"
            />
          </div>
          <div>
            <label class="text-xl" for="author">Author</label>
            <input
              type="text"
              name="author"
              class="input input-bordered w-full max-w-xs my-3 mx-3"
              placeholder="Enter book Author"
            />
          </div>
          <div class="flex flex-row items-start">
            <label class="text-xl mt-5" for="description">Description</label>

            <textarea
              class="textarea textarea-bordered textarea-lg mx-3 resize-none border-solid outline-none rounded-xl my-3"
              name="description"
              placeholder="Enter the book description"
            ></textarea>
          </div>
          <div>
            <label class="text-xl" for="quantity">Quantity</label>
            <input
              type="number"
              name="quantity"
              class="input input-bordered w-full max-w-xs my-3 mx-3"
              placeholder="Enter how many books to enter"
            />
          </div>
          <div>
            <label class="text-xl" for="rating">Rating</label>
            <input
              type="number"
              name="rating"
              class="input input-bordered w-full max-w-xs my-3 mx-3"
              placeholder="Enter the rating of the book"
            />
          </div>
          <div>
            <label class="text-xl" for="publication_date"
              >Publication Date:</label
            >
            <input
              type="date"
              name="publication_date"
              class="input outline-none focus:outline-none my-3 mx-3"
            />
          </div>
        </form>

        <div class="modal-action">
          <form method="dialog">
            <button class="btn btn-primary addbook" type="submit" id="addbook">
              Add
            </button>
          </form>
        </div>
      </div>
    </dialog>
    <% if (requestedReturns.length > 0) { %>
    <script>
      const returnCheckboxes = document.querySelectorAll(".return-checkbox");
      const selectedIssueIds = [];

      returnCheckboxes.forEach((checkbox) => {
        checkbox.addEventListener("change", (event) => {
          if (event.target.checked) {
            selectedIssueIds.push(event.target.dataset.issueId);
          } else {
            const index = selectedIssueIds.indexOf(
              event.target.dataset.issueId
            );
            if (index > -1) {
              selectedIssueIds.splice(index, 1);
            }
          }
        });
      });

      const submitButton = document.getElementsByClassName("approve-btn");
      submitButton[0].addEventListener("click", (event) => {
        event.preventDefault();
        if (selectedIssueIds.length === 0) {
          alert("Please select at least one checkbox");
          return;
        }

        const requestBody = JSON.stringify({ issueIds: selectedIssueIds });

        fetch("/api/admin/approve", {
          method: "POST",
          body: requestBody,
          headers: { "Content-Type": "application/json" },
        })
          .then((response) => response.json())
          .then((data) => {
            selectedIssueIds.length = 0;
          });
      });
    </script>
    <% } %> <% if (requestedAdmins.length > 0) { %>
    <script>
      const adminCheckboxes = document.querySelectorAll(".admin-checkbox");
      const selectedUserIds = [];

      adminCheckboxes.forEach((checkbox) => {
        checkbox.addEventListener("change", (event) => {
          if (event.target.checked) {
            selectedUserIds.push(event.target.dataset.userId);
          } else {
            const index = selectedUserIds.indexOf(event.target.dataset.userId);
            if (index > -1) {
              selectedUserIds.splice(index, 1);
            }
          }
        });
      });
      const submitAdminButton =
        document.getElementsByClassName("approve-admin-btn");

      submitAdminButton[0].addEventListener("click", (event) => {
        event.preventDefault();
        if (selectedUserIds.length === 0) {
          alert("Please select at least one checkbox");
          return;
        }

        const requestBody = JSON.stringify({ userIds: selectedUserIds });

        fetch("/api/admin/approveadmin/", {
          method: "POST",
          body: requestBody,
          headers: { "Content-Type": "application/json" },
        })
          .then((response) => response.json())
          .then((data) => {
            selectedUserIds.length = 0;
          });
      });
    </script>
    <% } %>

    <script>
      const logoutButton = document.getElementById("logout");
      logoutButton.addEventListener("click", async () => {
        try {
          const response = await fetch("/api/auth/logout", {
            method: "GET",
          });
          const data = await response.json();
          if (data.message === "Successfully logged out") {
            window.location.href = "/login";
          } else {
            error(data.message);
          }
        } catch (error) {
          alert(error);
        }
      });
    </script>
    <script>
      const addBookButton = document.getElementById("addbook");
      const addnewbookForm = document.getElementById("addnewbookForm");

      addBookButton.addEventListener("click", () => {
        addnewbookForm.submit();
      });
    </script>
  </body>
</html>
